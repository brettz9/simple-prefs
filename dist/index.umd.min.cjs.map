{"version":3,"file":"index.umd.min.cjs","sources":["../src/simple-prefs.js"],"sourcesContent":["/**\n* @typedef {{[key: string]: Value}} Defaults\n*/\n\n/**\n* @typedef {boolean|number|string} Value\n*/\n\n/**\n * Preferences storage.\n */\nexport class SimplePrefs {\n  /**\n   * @param {object} cfg\n   * @param {string} [cfg.namespace] Avoid clashes with other apps\n   * @param {Defaults} [cfg.defaults]\n   * @param {SimplePrefsDefaults} [cfg.prefDefaults]\n   */\n  constructor (cfg) {\n    this.configurePrefs(cfg);\n\n    /** @type {((e: StorageEvent) => void)[]} */\n    this.listeners = [];\n  }\n  /**\n   * @param {object} cfg\n   * @param {string} [cfg.namespace] Avoid clashes with other apps\n   * @param {Defaults} [cfg.defaults]\n   * @param {SimplePrefsDefaults} [cfg.prefDefaults]\n   * @returns {void}\n   */\n  configurePrefs ({\n    namespace, defaults, prefDefaults = simplePrefsDefaults(defaults)\n  }) {\n    this.namespace = namespace ?? '';\n    this.prefDefaults = prefDefaults;\n  }\n  /**\n   * Get parsed preference value; returns `Promise` in anticipation\n   * of https://domenic.github.io/async-local-storage/ .\n   * @callback GetPref\n   * @param {string} key Preference key (for Chrome-Compatibility, only `\\w+`)\n   * @returns {Promise<Value>} Resolves to the parsed\n   *   value (defaulting if necessary)\n   */\n\n  /** @type {GetPref} */\n  async getPref (key) {\n    const result = localStorage.getItem(this.namespace + key);\n    return result === null\n      ? await /** @type {SimplePrefsDefaults} */ (\n        this.prefDefaults\n      ).getPrefDefault(key)\n      : JSON.parse(result);\n  }\n  /**\n   * Set a stringifiable preference value; returns `Promise` in anticipation\n   *   of https://domenic.github.io/async-local-storage/ .\n   * @callback SetPref\n   * @param {string} key Preference key (for Chrome-Compatibility, only `\\w+`)\n   * @param {Value} val Stringifiable value\n   * @returns {Promise<void>} Resolves after setting the item (Not currently\n   *    in use)\n   */\n\n  /** @type {SetPref} */\n  async setPref (key, val) {\n    return await localStorage.setItem(\n      this.namespace + key, JSON.stringify(val)\n    );\n  }\n\n  /**\n  * @typedef {object} GetPrefSetPref\n  * @property {GetPref} getPref\n  * @property {SetPref} setPref\n  */\n\n  /**\n   * Convenience utility to return two main methods `getPref` and\n   *   `setPref` bound to the current object.\n   * @returns {GetPrefSetPref}\n   */\n  bind () {\n    return {\n      getPref: this.getPref.bind(this),\n      setPref: this.setPref.bind(this)\n    };\n  }\n\n  /**\n  * @callback PreferenceCallback\n  * @param {StorageEvent} e\n  * @returns {void}\n  */\n\n  /* eslint-disable promise/prefer-await-to-callbacks -- Repeating event */\n  /**\n  * @param {string|PreferenceCallback|undefined} key\n  * @param {PreferenceCallback} cb\n  * @returns {PreferenceCallback}\n  */\n  listen (key, cb) {\n    if (typeof key === 'function') {\n      cb = key;\n      key = undefined;\n    }\n\n    /**\n     * @param {StorageEvent} e\n     */\n    const listener = (e) => {\n      if (e.key === null) { // `null` for clear browser action or user `clear()`\n        if (key === undefined) { // Only trigger when no key supplied\n          return;\n        }\n      } else {\n        if (!e.key.startsWith(/** @type {string} */ (this.namespace))) {\n          return;\n        }\n        if (key !== undefined && !e.key.startsWith(\n          /** @type {string} */ (this.namespace) + key\n        )) {\n          return;\n        }\n      }\n\n      cb(e);\n    };\n\n    window.addEventListener('storage', listener);\n\n    this.listeners.push(listener);\n\n    return listener;\n  }\n\n  /**\n   * @param {EventListener} listener\n   * @returns {void}\n   */\n  unlisten (listener) {\n    if (listener) {\n      for (let i = 0; i < this.listeners.length; i++) {\n        if (listener === this.listeners[i]) {\n          this.listeners.splice(i, 1);\n          window.removeEventListener('storage', listener);\n          return;\n        }\n      }\n    }\n    this.listeners.forEach((listenerItem) => {\n      window.removeEventListener('storage', listenerItem);\n    });\n  }\n  /* eslint-enable promise/prefer-await-to-callbacks -- Repeating event */\n}\n\n/**\n * Defaults for SimplePrefs.\n */\nexport class SimplePrefsDefaults {\n  /**\n   *\n   * @param {{defaults: Defaults}} defaults\n   */\n  constructor ({defaults}) {\n    this.defaults = defaults;\n  }\n  /**\n   * Get parsed default value for a preference.\n   * @param {string} key Preference key\n   * @returns {Promise<Value>}\n   */\n  async getPrefDefault (key) {\n    return await this.defaults[key] ?? null;\n  }\n\n  /**\n   * Set parsed default value for a preference.\n   * @param {string} key Preference key\n   * @param {Value} value\n   * @returns {Promise<Value>} The old value\n   */\n  async setPrefDefault (key, value) {\n    const oldValue = this.defaults[key] ?? null;\n    this.defaults[key] = value;\n    return await oldValue;\n  }\n}\n\n/**\n * Simplified factory for `SimplePrefsDefaults`\n * @param {Defaults} [defaults]\n * @returns {SimplePrefsDefaults}\n */\nexport function simplePrefsDefaults (defaults = {}) {\n  return new SimplePrefsDefaults({defaults});\n}\n"],"names":["_await","value","then","direct","Promise","resolve","SimplePrefs","cfg","_classCallCheck","this","configurePrefs","listeners","_createClass","key","_ref","namespace","defaults","_ref$prefDefaults","prefDefaults","simplePrefsDefaults","result","localStorage","getItem","getPrefDefault","JSON","parse","e","reject","setPref","val","setItem","stringify","getPref","bind","cb","_this3","undefined","listener","startsWith","window","addEventListener","push","i","length","splice","removeEventListener","forEach","listenerItem","SimplePrefsDefaults","_ref2","_this4$defaults$key","setPrefDefault","_this5$defaults$key","oldValue","arguments"],"mappings":"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"}