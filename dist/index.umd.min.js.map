{"version":3,"file":"index.umd.min.js","sources":["../src/simple-prefs.js"],"sourcesContent":["/**\n * @module SimplePrefs\n */\n\n/**\n* @typedef {PlainObject<string: module:SimplePrefs.Value>}\n*   module:SimplePrefs.Defaults\n*/\n\n/**\n* @typedef {boolean|number|string} module:SimplePrefs.Value\n*/\n\nexport class SimplePrefs {\n  /**\n   * @param {PlainObject} cfg\n   * @param {string} cfg.namespace Avoid clashes with other apps\n   * @param {module:SimplePrefs.Defaults} cfg.defaults\n   * @param {module:SimplePrefs.SimplePrefsDefaults} cfg.prefDefaults\n   * @returns {void}\n   */\n  constructor (cfg) {\n    this.configurePrefs(cfg);\n  }\n  /**\n   * @param {PlainObject} cfg\n   * @param {string} cfg.namespace Avoid clashes with other apps\n   * @param {module:SimplePrefs.Defaults} cfg.defaults\n   * @param {module:SimplePrefs.SimplePrefsDefaults} cfg.prefDefaults\n   * @returns {void}\n   */\n  configurePrefs ({\n    namespace, defaults, prefDefaults = simplePrefsDefaults(defaults)\n  }) {\n    Object.assign(this, {namespace, prefDefaults});\n  }\n  /**\n   * Get parsed preference value; returns `Promise` in anticipation\n   * of https://domenic.github.io/async-local-storage/ .\n   * @param {string} key Preference key (for Chrome-Compatibility, only `\\w+`)\n   * @returns {Promise<module:SimplePrefs.Value>} Resolves to the parsed\n   *   value (defaulting if necessary)\n   */\n  async getPref (key) { // eslint-disable-line require-await\n    const result = localStorage.getItem(this.namespace + key);\n    return result === null\n      ? this.prefDefaults.getPrefDefault(key)\n      : JSON.parse(result);\n  }\n  /**\n   * Set a stringifiable preference value; returns `Promise` in anticipation\n   *   of https://domenic.github.io/async-local-storage/ .\n   * @param {string} key Preference key (for Chrome-Compatibility, only `\\w+`)\n   * @param {module:SimplePrefs.Value} val Stringifiable value\n   * @returns {Promise<void>} Resolves after setting the item (Not currently\n   *    in use)\n   */\n  async setPref (key, val) { // eslint-disable-line require-await\n    return localStorage.setItem(this.namespace + key, JSON.stringify(val));\n  }\n}\n\nexport class SimplePrefsDefaults {\n  /**\n   *\n   * @param {module:SimplePrefs.Defaults} defaults\n   */\n  constructor ({defaults}) {\n    this.defaults = defaults;\n  }\n  /**\n   * Get parsed default value for a preference.\n   * @param {string} key Preference key\n   * @returns {Promise<module:SimplePrefs.Value>}\n   */\n  async getPrefDefault (key) { // eslint-disable-line require-await\n    return this.defaults[key];\n  }\n\n  /**\n   * Set parsed default value for a preference.\n   * @param {string} key Preference key\n   * @param {module:SimplePrefs.Value} value\n   * @returns {Promise<module:SimplePrefs.Value>} The old value\n   */\n  async setPrefDefault (key, value) { // eslint-disable-line require-await\n    const oldValue = this.defaults[key];\n    this.defaults[key] = value;\n    return oldValue;\n  }\n}\n\n/**\n * Simplified factory for `SimplePrefsDefaults`\n * @param {module:SimplePrefs.Defaults} defaults\n * @returns {module:SimplePrefs.SimplePrefsDefaults}\n */\nexport function simplePrefsDefaults (defaults) {\n  return new SimplePrefsDefaults({defaults});\n}\n"],"names":["SimplePrefs","cfg","configurePrefs","namespace","defaults","prefDefaults","simplePrefsDefaults","Object","assign","this","key","result","localStorage","getItem","getPrefDefault","JSON","parse","val","setItem","stringify","SimplePrefsDefaults","value","oldValue"],"mappings":"m0BAaaA,EAAb,sBAQeC,kBACNC,eAAeD,2DAUpBE,IAAAA,UAAWC,IAAAA,aAAUC,aAAAA,aAAeC,EAAoBF,KAExDG,OAAOC,OAAOC,KAAM,CAACN,UAAAA,EAAWE,aAAAA,iFASnBK,+FACPC,EAASC,aAAaC,QAAQJ,KAAKN,UAAYO,qBACnC,OAAXC,EACHF,KAAKJ,aAAaS,eAAeJ,GACjCK,KAAKC,MAAML,oLAUFD,EAAKO,2GACXL,aAAaM,QAAQT,KAAKN,UAAYO,EAAKK,KAAKI,UAAUF,gHA7CrE,GAiDaG,EAAb,6BAKgBhB,IAAAA,wBACPA,SAAWA,gGAOIM,2GACbD,KAAKL,SAASM,2LASDA,EAAKW,+FACnBC,EAAWb,KAAKL,SAASM,QAC1BN,SAASM,GAAOW,oBACdC,8GA1BX,GAmCO,SAAShB,EAAqBF,UAC5B,IAAIgB,EAAoB,CAAChB,SAAAA"}