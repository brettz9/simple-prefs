{"version":3,"file":"index.esm.min.js","sources":["../src/simple-prefs.js"],"sourcesContent":["/**\n * @module SimplePrefs\n */\n\n/**\n* @typedef {PlainObject<{\n* string: module:SimplePrefs.Value}>} module:SimplePrefs.Defaults\n*/\n\n/**\n* @typedef {boolean|number|string} module:SimplePrefs.Value\n*/\n\n/**\n * Preferences storage.\n */\nexport class SimplePrefs {\n  /**\n   * @param {PlainObject} cfg\n   * @param {string} cfg.namespace Avoid clashes with other apps\n   * @param {module:SimplePrefs.Defaults} cfg.defaults\n   * @param {module:SimplePrefs.SimplePrefsDefaults} cfg.prefDefaults\n   * @returns {void}\n   */\n  constructor (cfg) {\n    this.configurePrefs(cfg);\n    this.listeners = [];\n  }\n  /**\n   * @param {PlainObject} cfg\n   * @param {string} cfg.namespace Avoid clashes with other apps\n   * @param {module:SimplePrefs.Defaults} cfg.defaults\n   * @param {module:SimplePrefs.SimplePrefsDefaults} cfg.prefDefaults\n   * @returns {void}\n   */\n  configurePrefs ({\n    namespace, defaults, prefDefaults = simplePrefsDefaults(defaults)\n  }) {\n    Object.assign(this, {namespace, prefDefaults});\n  }\n  /**\n   * Get parsed preference value; returns `Promise` in anticipation\n   * of https://domenic.github.io/async-local-storage/ .\n   * @param {string} key Preference key (for Chrome-Compatibility, only `\\w+`)\n   * @returns {Promise<module:SimplePrefs.Value>} Resolves to the parsed\n   *   value (defaulting if necessary)\n   */\n  async getPref (key) {\n    const result = localStorage.getItem(this.namespace + key);\n    return result === null\n      ? await this.prefDefaults.getPrefDefault(key)\n      : JSON.parse(result);\n  }\n  /**\n   * Set a stringifiable preference value; returns `Promise` in anticipation\n   *   of https://domenic.github.io/async-local-storage/ .\n   * @param {string} key Preference key (for Chrome-Compatibility, only `\\w+`)\n   * @param {module:SimplePrefs.Value} val Stringifiable value\n   * @returns {Promise<void>} Resolves after setting the item (Not currently\n   *    in use)\n   */\n  async setPref (key, val) {\n    return await localStorage.setItem(\n      this.namespace + key, JSON.stringify(val)\n    );\n  }\n\n  /**\n  * @typedef {PlainObject} GetPrefSetPref\n  * @property {module:SimplePrefs.SimplePrefs#getPref} getPref\n  * @property {module:SimplePrefs.SimplePrefs#setPref} setPref\n  */\n\n  /**\n   * Convenience utility to return two main methods `getPref` and\n   *   `setPref` bound to the current object.\n   * @returns {GetPrefSetPref}\n   */\n  bind () {\n    return {\n      getPref: this.getPref.bind(this),\n      setPref: this.setPref.bind(this)\n    };\n  }\n\n  /**\n  * @callback PreferenceCallback\n  * @returns {void}\n  */\n\n  /* eslint-disable promise/prefer-await-to-callbacks -- Repeating event */\n  /**\n  * @param {string} [key]\n  * @param {PreferenceCallback} cb\n  * @returns {void}\n  */\n  listen (key, cb) {\n    if (typeof key === 'function') {\n      cb = key;\n      key = undefined;\n    }\n\n    const listener = (e) => {\n      if (e.key === null) { // `null` for clear browser action or user `clear()`\n        if (key === undefined) { // Only trigger when no key supplied\n          return;\n        }\n      } else {\n        if (!e.key.startsWith(this.namespace)) {\n          return;\n        }\n        if (key !== undefined && !e.key.startsWith(this.namespace + key)) {\n          return;\n        }\n      }\n\n      cb(e);\n    };\n\n    window.addEventListener('storage', listener);\n\n    this.listeners.push(listener);\n\n    return listener;\n  }\n\n  /**\n   * @param {EventListener} listener\n   * @returns {void}\n   */\n  unlisten (listener) {\n    if (listener) {\n      for (let i = 0; i < this.listeners.length; i++) {\n        if (listener === this.listeners[i]) {\n          this.listeners.splice(i, 1);\n          window.removeEventListener('storage', listener);\n          return;\n        }\n      }\n    }\n    this.listeners.forEach((listenerItem) => {\n      window.removeEventListener('storage', listenerItem);\n    });\n  }\n  /* eslint-enable promise/prefer-await-to-callbacks -- Repeating event */\n}\n\n/**\n * Defaults for SimplePrefs.\n */\nexport class SimplePrefsDefaults {\n  /**\n   *\n   * @param {module:SimplePrefs.Defaults} defaults\n   */\n  constructor ({defaults}) {\n    this.defaults = defaults;\n  }\n  /**\n   * Get parsed default value for a preference.\n   * @param {string} key Preference key\n   * @returns {Promise<module:SimplePrefs.Value>}\n   */\n  async getPrefDefault (key) {\n    return await this.defaults[key];\n  }\n\n  /**\n   * Set parsed default value for a preference.\n   * @param {string} key Preference key\n   * @param {module:SimplePrefs.Value} value\n   * @returns {Promise<module:SimplePrefs.Value>} The old value\n   */\n  async setPrefDefault (key, value) {\n    const oldValue = this.defaults[key];\n    this.defaults[key] = value;\n    return await oldValue;\n  }\n}\n\n/**\n * Simplified factory for `SimplePrefsDefaults`\n * @param {module:SimplePrefs.Defaults} defaults\n * @returns {module:SimplePrefs.SimplePrefsDefaults}\n */\nexport function simplePrefsDefaults (defaults) {\n  return new SimplePrefsDefaults({defaults});\n}\n"],"names":["_await","value","then","direct","Promise","resolve","SimplePrefs","cfg","_classCallCheck","this","configurePrefs","listeners","_createClass","key","_ref","namespace","defaults","_ref$prefDefaults","prefDefaults","simplePrefsDefaults","Object","assign","result","localStorage","getItem","getPrefDefault","JSON","parse","e","reject","setPref","val","setItem","stringify","getPref","bind","cb","_this3","undefined","listener","startsWith","window","addEventListener","push","i","length","splice","removeEventListener","forEach","listenerItem","SimplePrefsDefaults","_ref2","setPrefDefault","oldValue"],"mappings":"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"}