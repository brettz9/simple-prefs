{"version":3,"file":"index.esm.min.js","sources":["../src/simple-prefs.js"],"sourcesContent":["/**\n * @module SimplePrefs\n */\n\n/**\n* @typedef {PlainObject<{\n* string: module:SimplePrefs.Value}>} module:SimplePrefs.Defaults\n*/\n\n/**\n* @typedef {boolean|number|string} module:SimplePrefs.Value\n*/\n\n/**\n * Preferences storage.\n */\nexport class SimplePrefs {\n  /**\n   * @param {PlainObject} cfg\n   * @param {string} cfg.namespace Avoid clashes with other apps\n   * @param {module:SimplePrefs.Defaults} cfg.defaults\n   * @param {module:SimplePrefs.SimplePrefsDefaults} cfg.prefDefaults\n   * @returns {void}\n   */\n  constructor (cfg) {\n    this.configurePrefs(cfg);\n  }\n  /**\n   * @param {PlainObject} cfg\n   * @param {string} cfg.namespace Avoid clashes with other apps\n   * @param {module:SimplePrefs.Defaults} cfg.defaults\n   * @param {module:SimplePrefs.SimplePrefsDefaults} cfg.prefDefaults\n   * @returns {void}\n   */\n  configurePrefs ({\n    namespace, defaults, prefDefaults = simplePrefsDefaults(defaults)\n  }) {\n    Object.assign(this, {namespace, prefDefaults});\n  }\n  /**\n   * Get parsed preference value; returns `Promise` in anticipation\n   * of https://domenic.github.io/async-local-storage/ .\n   * @param {string} key Preference key (for Chrome-Compatibility, only `\\w+`)\n   * @returns {Promise<module:SimplePrefs.Value>} Resolves to the parsed\n   *   value (defaulting if necessary)\n   */\n  async getPref (key) {\n    const result = localStorage.getItem(this.namespace + key);\n    return result === null\n      ? await this.prefDefaults.getPrefDefault(key)\n      : JSON.parse(result);\n  }\n  /**\n   * Set a stringifiable preference value; returns `Promise` in anticipation\n   *   of https://domenic.github.io/async-local-storage/ .\n   * @param {string} key Preference key (for Chrome-Compatibility, only `\\w+`)\n   * @param {module:SimplePrefs.Value} val Stringifiable value\n   * @returns {Promise<void>} Resolves after setting the item (Not currently\n   *    in use)\n   */\n  async setPref (key, val) {\n    return await localStorage.setItem(\n      this.namespace + key, JSON.stringify(val)\n    );\n  }\n\n  /**\n  * @typedef {PlainObject} GetPrefSetPref\n  * @property {module:SimplePrefs.SimplePrefs#getPref} getPref\n  * @property {module:SimplePrefs.SimplePrefs#setPref} setPref\n  */\n\n  /**\n   * Convenience utility to return two main methods `getPref` and\n   *   `setPref` bound to the current object.\n   * @returns {GetPrefSetPref}\n   */\n  bind () {\n    return {\n      getPref: this.getPref.bind(this),\n      setPref: this.setPref.bind(this)\n    };\n  }\n\n  /**\n  * @callback PreferenceCallback\n  * @returns {void}\n  */\n\n  /* eslint-disable promise/prefer-await-to-callbacks -- Repeating event */\n  /**\n  * @param {string} [key]\n  * @param {PreferenceCallback} cb\n  * @returns {void}\n  */\n  listen (key, cb) {\n    if (typeof key === 'function') {\n      cb = key;\n      key = undefined;\n    }\n    window.addEventListener('storage', (e) => {\n      if (!e.key.startsWith(this.namespace)) {\n        return;\n      }\n      if (key !== undefined && !e.key.startsWith(this.namespace + key)) {\n        return;\n      }\n\n      cb(e);\n    });\n  }\n  /* eslint-enable promise/prefer-await-to-callbacks -- Repeating event */\n}\n\n/**\n * Defaults for SimplePrefs.\n */\nexport class SimplePrefsDefaults {\n  /**\n   *\n   * @param {module:SimplePrefs.Defaults} defaults\n   */\n  constructor ({defaults}) {\n    this.defaults = defaults;\n  }\n  /**\n   * Get parsed default value for a preference.\n   * @param {string} key Preference key\n   * @returns {Promise<module:SimplePrefs.Value>}\n   */\n  async getPrefDefault (key) {\n    return await this.defaults[key];\n  }\n\n  /**\n   * Set parsed default value for a preference.\n   * @param {string} key Preference key\n   * @param {module:SimplePrefs.Value} value\n   * @returns {Promise<module:SimplePrefs.Value>} The old value\n   */\n  async setPrefDefault (key, value) {\n    const oldValue = this.defaults[key];\n    this.defaults[key] = value;\n    return await oldValue;\n  }\n}\n\n/**\n * Simplified factory for `SimplePrefsDefaults`\n * @param {module:SimplePrefs.Defaults} defaults\n * @returns {module:SimplePrefs.SimplePrefsDefaults}\n */\nexport function simplePrefsDefaults (defaults) {\n  return new SimplePrefsDefaults({defaults});\n}\n"],"names":["value","then","direct","Promise","resolve","SimplePrefs","cfg","configurePrefs","namespace","defaults","prefDefaults","simplePrefsDefaults","Object","assign","this","key","result","localStorage","getItem","getPrefDefault","JSON","parse","val","setItem","stringify","getPref","bind","setPref","cb","undefined","window","addEventListener","e","startsWith","_this5","SimplePrefsDefaults","oldValue"],"mappings":"6TAoFO,WAAgBA,EAAOC,EAAMC,UAC/BA,EACID,EAAOA,EAAKD,GAASA,GAExBA,GAAUA,EAAMC,OACpBD,EAAQG,QAAQC,QAAQJ,IAElBC,EAAOD,EAAMC,KAAKA,GAAQD,OA3ErBK,wBAQEC,kBACNC,eAAeD,2CAStB,gBACEE,IAAAA,UAAWC,IAAAA,aAAUC,aAAAA,aAAeC,EAAoBF,KAExDG,OAAOC,OAAOC,KAAM,CAACN,UAAAA,EAAWE,aAAAA,oCASnBK,WACPC,EAASC,aAAaC,QAAQJ,KAAKN,UAAYO,YACnC,OAAXC,EAD6BF,KAErBJ,aAAaS,eAAeJ,GACvCK,KAAKC,MAAML,YAFG,OAAXA,uEAYMD,EAAKO,gBACLL,aAAaM,QACxBT,KAAKN,UAAYO,EAAKK,KAAKI,UAAUF,4DAezC,iBACS,CACLG,QAASX,KAAKW,QAAQC,KAAKZ,MAC3Ba,QAASb,KAAKa,QAAQD,KAAKZ,6BAe/B,SAAQC,EAAKa,cACQ,mBAARb,IACTa,EAAKb,EACLA,OAAMc,GAERC,OAAOC,iBAAiB,WAAW,SAACC,GAC7BA,EAAEjB,IAAIkB,WAAWC,EAAK1B,kBAGfqB,IAARd,GAAsBiB,EAAEjB,IAAIkB,WAAWC,EAAK1B,UAAYO,KAI5Da,EAAGI,eASIG,+BAKG1B,IAAAA,wBACPA,SAAWA,mDAOIM,gBACPD,KAAKL,SAASM,8EASPA,EAAKf,WACnBoC,EAAWtB,KAAKL,SAASM,UAAdD,KACZL,SAASM,GAAOf,IACRoC,+CASV,SAASzB,EAAqBF,UAC5B,IAAI0B,EAAoB,CAAC1B,SAAAA"}