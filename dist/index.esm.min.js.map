{"version":3,"file":"index.esm.min.js","sources":["../src/simple-prefs.js"],"sourcesContent":["/**\n* @typedef {{[key: string]: Value}} Defaults\n*/\n\n/**\n* @typedef {boolean|number|string} Value\n*/\n\n/**\n * Preferences storage.\n */\nexport class SimplePrefs {\n  /**\n   * @param {object} cfg\n   * @param {string} [cfg.namespace] Avoid clashes with other apps\n   * @param {Defaults} [cfg.defaults]\n   * @param {SimplePrefsDefaults} [cfg.prefDefaults]\n   */\n  constructor (cfg) {\n    this.configurePrefs(cfg);\n\n    /** @type {((e: StorageEvent) => void)[]} */\n    this.listeners = [];\n  }\n  /**\n   * @param {object} cfg\n   * @param {string} [cfg.namespace] Avoid clashes with other apps\n   * @param {Defaults} [cfg.defaults]\n   * @param {SimplePrefsDefaults} [cfg.prefDefaults]\n   * @returns {void}\n   */\n  configurePrefs ({\n    namespace, defaults, prefDefaults = simplePrefsDefaults(defaults)\n  }) {\n    this.namespace = namespace ?? '';\n    this.prefDefaults = prefDefaults;\n  }\n  /**\n   * Get parsed preference value; returns `Promise` in anticipation\n   * of https://domenic.github.io/async-local-storage/ .\n   * @callback GetPref\n   * @param {string} key Preference key (for Chrome-Compatibility, only `\\w+`)\n   * @returns {Promise<Value>} Resolves to the parsed\n   *   value (defaulting if necessary)\n   */\n\n  /** @type {GetPref} */\n  async getPref (key) {\n    const result = localStorage.getItem(this.namespace + key);\n    return result === null\n      ? await /** @type {SimplePrefsDefaults} */ (\n        this.prefDefaults\n      ).getPrefDefault(key)\n      : JSON.parse(result);\n  }\n  /**\n   * Set a stringifiable preference value; returns `Promise` in anticipation\n   *   of https://domenic.github.io/async-local-storage/ .\n   * @callback SetPref\n   * @param {string} key Preference key (for Chrome-Compatibility, only `\\w+`)\n   * @param {Value} val Stringifiable value\n   * @returns {Promise<void>} Resolves after setting the item (Not currently\n   *    in use)\n   */\n\n  /** @type {SetPref} */\n  async setPref (key, val) {\n    return await localStorage.setItem(\n      this.namespace + key, JSON.stringify(val)\n    );\n  }\n\n  /**\n  * @typedef {object} GetPrefSetPref\n  * @property {GetPref} getPref\n  * @property {SetPref} setPref\n  */\n\n  /**\n   * Convenience utility to return two main methods `getPref` and\n   *   `setPref` bound to the current object.\n   * @returns {GetPrefSetPref}\n   */\n  bind () {\n    return {\n      getPref: this.getPref.bind(this),\n      setPref: this.setPref.bind(this)\n    };\n  }\n\n  /**\n  * @callback PreferenceCallback\n  * @param {StorageEvent} e\n  * @returns {void}\n  */\n\n  /* eslint-disable promise/prefer-await-to-callbacks -- Repeating event */\n  /**\n  * @param {string|PreferenceCallback|undefined} key\n  * @param {PreferenceCallback} cb\n  * @returns {PreferenceCallback}\n  */\n  listen (key, cb) {\n    if (typeof key === 'function') {\n      cb = key;\n      key = undefined;\n    }\n\n    /**\n     * @param {StorageEvent} e\n     */\n    const listener = (e) => {\n      if (e.key === null) { // `null` for clear browser action or user `clear()`\n        if (key === undefined) { // Only trigger when no key supplied\n          return;\n        }\n      } else {\n        if (!e.key.startsWith(/** @type {string} */ (this.namespace))) {\n          return;\n        }\n        if (key !== undefined && !e.key.startsWith(\n          /** @type {string} */ (this.namespace) + key\n        )) {\n          return;\n        }\n      }\n\n      cb(e);\n    };\n\n    window.addEventListener('storage', listener);\n\n    this.listeners.push(listener);\n\n    return listener;\n  }\n\n  /**\n   * @param {EventListener} listener\n   * @returns {void}\n   */\n  unlisten (listener) {\n    if (listener) {\n      for (let i = 0; i < this.listeners.length; i++) {\n        if (listener === this.listeners[i]) {\n          this.listeners.splice(i, 1);\n          window.removeEventListener('storage', listener);\n          return;\n        }\n      }\n    }\n    this.listeners.forEach((listenerItem) => {\n      window.removeEventListener('storage', listenerItem);\n    });\n  }\n  /* eslint-enable promise/prefer-await-to-callbacks -- Repeating event */\n}\n\n/**\n * Defaults for SimplePrefs.\n */\nexport class SimplePrefsDefaults {\n  /**\n   *\n   * @param {{defaults: Defaults}} defaults\n   */\n  constructor ({defaults}) {\n    this.defaults = defaults;\n  }\n  /**\n   * Get parsed default value for a preference.\n   * @param {string} key Preference key\n   * @returns {Promise<Value>}\n   */\n  async getPrefDefault (key) {\n    return await this.defaults[key] ?? null;\n  }\n\n  /**\n   * Set parsed default value for a preference.\n   * @param {string} key Preference key\n   * @param {Value} value\n   * @returns {Promise<Value>} The old value\n   */\n  async setPrefDefault (key, value) {\n    const oldValue = this.defaults[key] ?? null;\n    this.defaults[key] = value;\n    return await oldValue;\n  }\n}\n\n/**\n * Simplified factory for `SimplePrefsDefaults`\n * @param {Defaults} [defaults]\n * @returns {SimplePrefsDefaults}\n */\nexport function simplePrefsDefaults (defaults = {}) {\n  return new SimplePrefsDefaults({defaults});\n}\n"],"names":["_await","value","then","direct","Promise","resolve","_call","body","result","e","reject","SimplePrefs","constructor","cfg","this","configurePrefs","listeners","_ref","namespace","defaults","prefDefaults","simplePrefsDefaults","getPref","key","_this","localStorage","getItem","getPrefDefault","JSON","parse","setPref","val","_this2","setItem","stringify","bind","listen","cb","undefined","listener","startsWith","window","addEventListener","push","unlisten","i","length","splice","removeEventListener","forEach","listenerItem","SimplePrefsDefaults","_ref2","_this3","_this3$defaults$key","setPrefDefault","_this4","oldValue","arguments"],"mappings":"AAoFO,SAAAA,EAAgBC,EAAOC,EAAMC,GACnC,OAAIA,EACID,EAAOA,EAAKD,GAASA,GAExBA,GAAUA,EAAMC,OACpBD,EAAQG,QAAQC,QAAQJ,IAElBC,EAAOD,EAAMC,KAAKA,GAAQD,EAClC,CAmbO,SAAAK,EAAeC,EAAML,EAAMC,GAIjC,IACC,IAAIK,EAASJ,QAAQC,QAAQE,KAC7B,OAAOL,EAAOM,EAAON,KAAKA,GAAQM,CAClC,CAAC,MAAOC,GACR,OAAOL,QAAQM,OAAOD,EACvB,CACD,CA9gBO,MAAME,EAOXC,WAAAA,CAAaC,GACXC,KAAKC,eAAeF,GAGpBC,KAAKE,UAAY,EACnB,CAQAD,cAAAA,CAAcE,GAEX,IAFaC,UACdA,EAASC,SAAEA,EAAQC,aAAEA,EAAeC,EAAoBF,IACzDF,EACCH,KAAKI,UAAYA,GAAa,GAC9BJ,KAAKM,aAAeA,CACtB,CAWME,OAAAA,CAASC,GAAG,MAAAC,EACoBV,KAAI,OAAAR,GADtB,WAClB,MAAME,EAASiB,aAAaC,QAAQF,EAAKN,UAAYK,GAAK,OAAAvB,EAAAA,EACxC,OAAXQ,EAEHgB,EAAKJ,aACLO,eAAeJ,GACfK,KAAKC,MAAMrB,QAAO,IAJJ,OAAXA,OAKR,CAYKsB,OAAAA,CAASP,EAAKQ,GAAG,MAAAC,EAEnBlB,KAAI,OAAAR,GAFiB,WAAA,OAAAN,EACVyB,aAAaQ,QACxBD,EAAKd,UAAYK,EAAKK,KAAKM,UAAUH,OAExC,CAaDI,IAAAA,GACE,MAAO,CACLb,QAASR,KAAKQ,QAAQa,KAAKrB,MAC3BgB,QAAShB,KAAKgB,QAAQK,KAAKrB,MAE/B,CAcAsB,MAAAA,CAAQb,EAAKc,GACQ,mBAARd,IACTc,EAAKd,EACLA,OAAMe,GAMR,MAAMC,EAAY9B,IAChB,GAAc,OAAVA,EAAEc,KACJ,QAAYe,IAARf,EACF,WAEG,CACL,IAAKd,EAAEc,IAAIiB,WAAkC1B,KAAKI,WAChD,OAEF,QAAYoB,IAARf,IAAsBd,EAAEc,IAAIiB,WACP1B,KAAKI,UAAaK,GAEzC,MAEJ,CAEAc,EAAG5B,EAAE,EAOP,OAJAgC,OAAOC,iBAAiB,UAAWH,GAEnCzB,KAAKE,UAAU2B,KAAKJ,GAEbA,CACT,CAMAK,QAAAA,CAAUL,GACR,GAAIA,EACF,IAAK,IAAIM,EAAI,EAAGA,EAAI/B,KAAKE,UAAU8B,OAAQD,IACzC,GAAIN,IAAazB,KAAKE,UAAU6B,GAG9B,OAFA/B,KAAKE,UAAU+B,OAAOF,EAAG,QACzBJ,OAAOO,oBAAoB,UAAWT,GAK5CzB,KAAKE,UAAUiC,SAASC,IACtBT,OAAOO,oBAAoB,UAAWE,EAAa,GAEvD,EAOK,MAAMC,EAKXvC,WAAAA,CAAWwC,GAAc,IAAZjC,SAACA,GAASiC,EACrBtC,KAAKK,SAAWA,CAClB,CAMMQ,cAAAA,CAAgBJ,GAAG,MAAA8B,EACVvC,KAAI,OAAAR,GADQ,WAAA,OAAAN,EACZqD,EAAKlC,SAASI,IAAI,SAAA+B,GAA/B,OAAOA,GAA4B,IAAK,MACzC,CAQKC,cAAAA,CAAgBhC,EAAKtB,GAAK,MAAAuD,EACb1C,KAAI,OAAAR,GADW,WAChC,MAAMmD,EAAWD,EAAKrC,SAASI,IAAQ,KACZ,OAA3BiC,EAAKrC,SAASI,GAAOtB,EAAMD,EACdyD,KACd,EAQI,SAASpC,IACd,OAAO,IAAI8B,EAAoB,CAAChC,SADWuC,UAAAZ,OAAA,QAAAR,IAAAoB,UAAA,GAAAA,UAAA,GAAG,CAAA,GAEhD"}